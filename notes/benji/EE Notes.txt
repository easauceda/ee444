EE444 Notes: 3/28/2016
 - Computer Organization v.s Computer Architecture
 - Structure and functions 
 - 4 basic functions of the system 
 - structure of the system
 
 Organization: actual physical componenets of the system (hardware details and how they interect with each other)
	- Transparent to the programmer (implementation of hardware details are abstracted from the great all mighty computer programmers)
		Ex. Controll signal?? (??? = will learn more about later) 
			Memory System ??
			
 Architecture: attributes that are visible to the programmer and have  direct impact to the program.
	
	Ex. ISA -> Instruction SET Architecture???
		The number or bits used to represent different data type
		Addressing Mode techniques??? 
		
 A computer is a complex System
	- Structure refers to the components and subcomponentes and how they interact with each other (top level view)
	- Function refers to how each of the components operate
	*What are the 4 basic functions of the system (see figure 1)
		- Data Storage 
			-Long term (disk)
			-Short term (ram)
		- Data Processing (applying operations to data)
		- Data Transferring (or moving as she calls it...)
			- if the device is connected to the system directly the process is called Input/Output (peripheral)
			- if the device is remote over longer distance the process is refereed to as communication
		- Control 
Structure of the computer (see figure 2)
	-cpu: central processing unit
		-instruction set and execute
		*Further broke down into components
			1.) Cu: (controll unit) controll the operation of cpu and hence controls the system. fetch instructions, decode, and execution (instruction system)
			2.) ALU: Arithmetic Logic unit. provide data processing functions 
			3.) Registers: provides internal storage for cpu
			4.) internal bus: allows the above components to communicate
	-System Bus: makes it possible for cpu memory and I/O to comunicate and exchange information
	-I/O: moves data into the system and out 
	-Main memory: (Ram)
	
__________________________________________________________________________________________________________________________________________________________
Notes: 3/30/2016
-Multi Core System structure 
-central processing unit (cpu)
-Core (multi-processing)
-Processor
-PCB (printed circut board)
-computer history

	Single Processing Computer Cpu Componentes (review):
		- ALU
		- CU
		- Registers
	
	MultiCore Computer: Contemporary computers have multiple processors that are refered to multicore computers
	* these multi processors are placed on a single silicon chip
	* each processing unit is consisting of (ALU, CU, Registers, Cache) -> names as Core
	* Hence multiprocesser is same as multicore
	
	Multi level memeory (Cache; one of the most important reasons that computer are doing so well preformance wise  )
	|
	|-> cache is faster, smaller, and more exspensive per bit than main memory
	Cache comes in three levels. Cache is placed between main memory and cpu.
	Buffers the data (likely to be accessed in the near future) from main memory.
	
	PCB -> Printed circuiut Board
	- flat rigid board that interconnect chips and electronic components
	- the main PCB is referred to as System board or mother board (see figure 4)
	- Memory holds both Data and instruction
	- L1 cache is split into:
		- L1 I cache
		- L1 D cache
		split to avoid structured hazard (possibly mutating data in parallel)
	
	-Processor: a physical piece of silicon consisting of one or more cores. The processor is the computer component that
	fetches, interprets, executes instructions
	
	Computer history ZZZ.... :'( why!?!? why?!?!?! :/
	5 Generations: (roughly) Each generation we will see changes in terms of the following:
		- size
		- cost
		- power
		-efficiency
		-reliability
	1.)Vaccume tubes (1940-1956)
		- consumed alot of energy and generated lots of heat
		- slow and expensive 
		- large!! took up entire rooms
		- Machine language was used or binary to program the computers
		- As input, punch cards were used, and printed out as output
		-ENIAC, Univac: Von New Monn??
		
	2.)Transistors!! :D (1956 -1964)
		- computers became faster cheaper, smaller
		- programming lanugage used was assembly and some higherlevel languages like fortran and colbolt 
		- input -> punching cards
		- output -> print out
	3.)Integrated circuits!!(IC for short) :D (1964 -1971)
		- miniaturized transitions from previous gen and put them on a chip and called them integrated circuits
		- SSI-> small scale IC's
		- MSI-> medium scale IC's
		- LSI-> large scale IC's
		- Keyboard and monitors
		- Operating Systems
		- IC's drastically increasing speed & performance
	4.)MicroProcessors (1971- present)
		- thousand of integrated cicuits are placed on a silicon chip 
		- now, computers could fit in the palm of your hands.
		- Intel 4004 ship - 1971:
			- CPU, memory, I/O, components are placed on a single chip 
		-1981, IBM intriduced the first home computer 
		-1984, Apple introduced Mac
		-Development of mouse, hand-held devices, GUI
		
	5.) Artificial intelligence (present- future)
		- Less about hardware upgrade 
		- Voice recognition 
		- goal of this generation is to develop devices that respond to natural human language 
		as input and are capable of learning & self organization
		- nanotechnology 
		- Improving performance & use of parallel processing
		
	next class:
		- hypothetical machine 
		- MBR, MAR, IR, PC
_______________________________________________________________________________________________________________________________________________
Notes: 4/4/2016
I Missed this class :'(
_______________________________________________________________________________________________________________________________________________________
Notes: 4/6/2016
- Insruction Cycle
- Hypothetical machine (AC, PC, IR)
- Hypothetical Machine (AC, PC, IR, MAR, MBR)
- Interrupts 
	See figure 5
	-Instruction Cycle
		AC - Accumulator (register)
		PC - program counter (holds address of instruction to fetch next)
		IC - Instruction register (holds instruction after fetched from memeory)
		
	System Bus 
		-Data Bus (blue)
		-Address Bus (yellow)
		-Control Bus (red)
	
	Instruction Cycle (figure 6)
		IF -> instruction fetch
		IE -> instruction execution 
		1.) Instruction fetch (IF)
		2.) Instruction decoding (ID)
		3.) Instruction execution (EXE)
		4.) Memory (MEM)
		5.) Write Back (WB)
		
		Steps??(chapter 3?)
		- Address of the instruction is in PC
		- Processor use that address to fetch the instruction and bring it into processor (IR)
		- Processor always increments PC to point to the next instruction to be fetched
		- (ID)Instruction includes information that indicates what operation has to be performed (decoding)
		- Instruction is executed
	
	Hypothectical machine:
	Instcrution is made of opcode and operand (16 bits)
		- 4 bits to opcode  and 12bits to operand
		
		opcode:
		0001 -> Read from memory into AC
		0101 -> Add to AC from memory
		0010 -> Store from AC into memory
		
		- 2^4 = 16, so only 16 possible operations can be defined... may be problematic 
		
	We could also include:
		- MAR -> Memeory Address Register
			- IO/AR (only stores addresses)
		- MBR -> Memory Buffer Register
			- IO/BR (stores instruction or data)
			
	Interrupts (can improve the cpu's efficiency????)
		-Like control signals,that will suspend an operation and then resume at a later time
		-*ISR - > interrupt service routine 
______________________________________________________________________________________
4/11/2016
-Different types of Operations
	- Data transfer 
	- Arithmetic operations 
	- Logical operations 
	- transfer of control 
	- Conversions
	
	Data transfer Operation
		- Load -> instruction to transfers (data or instruction) from memory into CPU registers
		ex. load data from 0XFE30 into Register 1
		[ assembly format: lw $1 , 0XFE30($gp) ] ($1 => register 1, lw is load instruction, $gp global pointer)
		- Store -> instruction to transfers data from CPU into memory
		ex. store the content of register 3 into memory location 0XFE34
		[ assembly format: sw $3, 0XFE34($gp)  ] ($3 => register 3, sw store instruction)
	
	Logical Operations & Arithmetic operation
		- Shift instructions
			sll shift left logical
			srl shift right logical
			sAr shift arithmetic logical (considers sign bit)
			sAl shift arithmetic logical (considers sign bit)
		- Rotate Right (don't need to know)
		- Rotate Left  (don't need to know)
		- And 
		- OR
		- Not (only takes on input) flips each bit
		- XOR 
		- NAND -> Not(AND)
		- NOR -> Not(Or)
		ex1. 
			$1 0100111
			$2 1101010
			
			AND operation for $1 and $2
			AND     $3, $1, $2
		  (opcode)  (operands)
			
			In this example registers $1 and $2 are AND'd (based on the optcode) and stored into register $3
		
		ex2. 
			Not operation for register $1 and put the result into $3
		
		ex3. 
			sll $3, $2, 2
			
			shift what's in register 2 to the left twice and write results to register 3
			(add two 0's on the right)
		
		ex4.
			srl $3, $2, 2
			
			shift what's in register 2 to the right twice and write results to register 3
			(add two 0's on the left)
		ex5.
			SAr $3, $2, 2
			airthmetic shift what's in register 2 to the right twice and write results to register 3
		   (add two of the sign bits on the left)
	
	- Transfer of control (branch jump)	
	
	- Booth's Algorithm (used for multiplying two signed binary numbers)
__________________________________________________________________________________________________________________
4/13/2016
- Combinational circuits 
- Digital Circuits
- Logic Gates
- Binary Logic 
- Boolean Algebra 
- Boolean Function 
- Basic identities of Boolean Algebra 

	- Sequential circuit use memory?
	- Combinational circuits don't use memory 
	
	Digital CKT:
		- hardware components that could manipulate with binary Data
		Logic gate: Basic form of digital CKT performs specific logic operations
		*universal gates: AND, OR, NOT, NAND, NOR
		
	Binary Logic:
		-Involves Binary variables and logic operations
		Binary variable: variable that could have only two discrete values, 1 or 0 
		
	*Binary logic is similar to binary arithmatic but ARE NOT the same. DON'T CONFUSE THEM!!! >:(
	
	Boolean Algebra: it is an algebra that deals with binary variables and logic operations (AND, OR, NOT)
	
	Boolean Expression:
		It isan algebraiac expression fonsisting of :
			- binary vairables 
			- logical operations
			- constant  1, 0
			-
	
	Boolean Function:
		Can be described with:
			- using truth table
			- Logical CKT diagram
			- boolean expresion
			         _     _
		F(X, Y, Z) = XYZ + ZX
			      
		
		
		
		
	
	
	
	
	
	
	
	


	
	
	
	
	
	
	
	
	
	
		   